import crypto_functions as cf


def rsa_demo(p: int, q: int, e: int, message: int):
    """Demo's encryption and decryption with the given arguments."""
    print("RSA")

    # find public key param n
    n = p * q
    print("Message:", message)
    print("Primes p & q:", p, q)
    print("Public key parameter n: ", n)
    print("Public key parameter e: ", e)

    # find phi(n) and private key parameter d
    phi_n = (p - 1) * (q - 1)
    d = cf.inverse_mod(e, phi_n)
    print("Phi(n):", phi_n)
    print("Private key parameter d:", d, "\n")

    # keys
    print("Public key n, e:", n, e)
    print("Private key n, d:", n, d, "\n")

    # create ciphetext c = m**e % n
    c = message**e % n
    print("Ciphertext:", c)

    # decrypt c to verify plaintext m
    m = c**d % n
    print("Decrypted plaintext:", m)

    return c


def generate_keys(p: int, q: int, e: int):
    """ Return a dict containing private and public key parameters."""

    n = p * q
    d = cf.inverse_mod(e, (p - 1) * (q - 1))
    phi_n = (p - 1) * (q - 1)

    return {"n": n, "e": e, "d": d, "phi_n": phi_n}


def encrypt(n: int, e: int, m: int):
    """ Return encrypted ciphertext."""
    ciphertext = m**e % n
    return ciphertext


def decrypt(n: int, d: int, c: int):
    """ Return decrypted plaintext."""

    return c**d % n


def sign(n: int, d: int, m: int):
    """ Return the signature for a given messsage."""

    return m**d % n


def verify_signature(n: int, e: int, s: int, m: int):
    """ Return true if signature matches message."""

    v = s**e % n
    print("Verfied m:", v)
    return v == m

def homomorphic(ci1, ci2, e, d):
    ci3 = ci1 * ci2
    print('\n', ci3)
    dec3 = ci3**d % n
    return dec3


#cipher1 = rsa_demo(7, 9, 5, int('110011', 2))
cipher1 = rsa_demo(103844424493729464783673436514325107389112184776492347900099959731614955567490392579564120780857291112347896056456188129582564961133333856416387132749066549899710337780162622292600478431747771806899068919131433458433085882570972536194784150618125321731296810296832511691166687368982763828142123821022680691339, 160283770205384345997533038230645880268166974777038928584444206535124606514435532145858726210499376660618434101461226634649209980625348422871851049431800339811789806684434471096776552249689143478749442935655840910669488237008060175191695379212241652870850887940832465755491637648303890655926513564059082298849, 154808442598980609327423790927680542596928572683789559999407888976398381655153733149292130250042939505640878558184780906221963945565249464482187736281195651367517644328682372631307789403974180835129123592449011630747770279250268899861063019321567108055486901428432463468391061442133924048749854689105049582323, 550304652486555850518304746550)
print('\n Cipher 1:', cipher1)
#cipher2 = rsa_demo(7, 9, 5, int('110101', 2))
cipher2 = rsa_demo(103844424493729464783673436514325107389112184776492347900099959731614955567490392579564120780857291112347896056456188129582564961133333856416387132749066549899710337780162622292600478431747771806899068919131433458433085882570972536194784150618125321731296810296832511691166687368982763828142123821022680691339, 160283770205384345997533038230645880268166974777038928584444206535124606514435532145858726210499376660618434101461226634649209980625348422871851049431800339811789806684434471096776552249689143478749442935655840910669488237008060175191695379212241652870850887940832465755491637648303890655926513564059082298849, 154808442598980609327423790927680542596928572683789559999407888976398381655153733149292130250042939505640878558184780906221963945565249464482187736281195651367517644328682372631307789403974180835129123592449011630747770279250268899861063019321567108055486901428432463468391061442133924048749854689105049582323, 22156276073203669139234564254)
print('\n Cipher 2:', cipher2)
p = 103844424493729464783673436514325107389112184776492347900099959731614955567490392579564120780857291112347896056456188129582564961133333856416387132749066549899710337780162622292600478431747771806899068919131433458433085882570972536194784150618125321731296810296832511691166687368982763828142123821022680691339
q = 160283770205384345997533038230645880268166974777038928584444206535124606514435532145858726210499376660618434101461226634649209980625348422871851049431800339811789806684434471096776552249689143478749442935655840910669488237008060175191695379212241652870850887940832465755491637648303890655926513564059082298849
n = p * q
phi_n = (p - 1) * (q - 1)
e = 154808442598980609327423790927680542596928572683789559999407888976398381655153733149292130250042939505640878558184780906221963945565249464482187736281195651367517644328682372631307789403974180835129123592449011630747770279250268899861063019321567108055486901428432463468391061442133924048749854689105049582323
d = d = cf.inverse_mod(e, phi_n)
dec = homomorphic(cipher1, cipher2, e, d)
print('\n Decryption 3:', dec)